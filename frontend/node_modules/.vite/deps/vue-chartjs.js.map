{
  "version": 3,
  "sources": ["../../vue-chartjs/src/utils.ts", "../../vue-chartjs/src/BaseCharts.ts"],
  "sourcesContent": ["import type { ChartType, ChartDataset, DefaultDataPoint } from 'chart.js'\n\nimport type { TChartData, TChartOptions, TypedChartJS } from './types'\n\nimport { SetupContext } from 'vue'\n\nexport enum ChartEmits {\n  ChartRendered = 'chart:rendered',\n  ChartUpdated = 'chart:updated',\n  ChartDestroyed = 'chart:destroyed',\n  LabelsUpdated = 'labels:updated'\n}\n\nexport function chartCreate<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  createChartFunction: (\n    data: TChartData<TType, TData, TLabel>,\n    options: TChartOptions<TType>\n  ) => void,\n  chartData: TChartData<TType, TData, TLabel>,\n  chartOptions: TChartOptions<TType>,\n  context?: SetupContext\n): void {\n  createChartFunction(chartData, chartOptions)\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartRendered)\n  }\n}\n\nexport function chartUpdate<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.update()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartUpdated)\n  }\n}\n\nexport function chartDestroy<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.destroy()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartDestroyed)\n  }\n}\n\nexport function getChartData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  data: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): TChartData<TType, TData, TLabel> {\n  const nextData = {\n    labels: typeof data.labels === 'undefined' ? [] : [...data.labels],\n    datasets: []\n  }\n\n  setChartDatasets(nextData, { ...data }, datasetIdKey)\n  return nextData\n}\n\nexport function setChartDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  oldData: TChartData<TType, TData, TLabel>,\n  newData: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): void {\n  const addedDatasets: ChartDataset<TType, TData>[] = []\n\n  oldData.datasets = newData.datasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = oldData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      )\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset }\n      }\n\n      addedDatasets.push(currentDataset)\n\n      Object.assign(currentDataset, nextDataset)\n\n      return currentDataset\n    }\n  ) as ChartDataset<TType, TData>[]\n}\n\nexport function setChartLabels<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chart: TypedChartJS<TType, TData, TLabel>,\n  labels: TLabel[] | undefined,\n  context?: SetupContext\n): void {\n  chart.data.labels = labels\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.LabelsUpdated)\n  }\n}\n\nexport function setChartOptions<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chart: TypedChartJS<TType, TData, TLabel>,\n  options: TChartOptions<TType>\n): void {\n  chart.options = { ...options }\n}\n\nexport function compareData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  newData: TChartData<TType, TData, TLabel>,\n  oldData: TChartData<TType, TData, TLabel>\n): boolean {\n  // Get new and old DataSet Labels\n  const newDatasetLabels = newData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  const oldDatasetLabels = oldData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  // Check if Labels are equal and if dataset length is equal\n  return (\n    oldData.datasets.length === newData.datasets.length &&\n    newDatasetLabels.every((value, index) => value === oldDatasetLabels[index])\n  )\n}\n\nexport const templateError =\n  'Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components'\n\nexport const chartUpdateError = 'Update ERROR: chart instance not found'\n", "import {\n  Chart as ChartJS,\n  BarController,\n  BubbleController,\n  DoughnutController,\n  LineController,\n  PieController,\n  PolarAreaController,\n  RadarController,\n  ScatterController\n} from 'chart.js'\n\nimport type {\n  ChartType,\n  ChartComponentLike,\n  DefaultDataPoint,\n  ChartOptions,\n  Plugin\n} from 'chart.js'\n\nimport {\n  defineComponent,\n  ref,\n  shallowRef,\n  h,\n  onMounted,\n  onBeforeUnmount,\n  watch,\n  isProxy,\n  toRaw,\n  PropType\n} from 'vue'\n\nimport {\n  chartCreate,\n  chartDestroy,\n  chartUpdate,\n  getChartData,\n  setChartLabels,\n  setChartDatasets,\n  compareData,\n  templateError,\n  chartUpdateError,\n  setChartOptions\n} from './utils'\n\nimport type {\n  TChartData,\n  TChartOptions,\n  TypedChartJS,\n  TypedChartComponent\n} from './types'\n\nexport const generateChart = <\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chartId: string,\n  chartType: TType,\n  chartController: ChartComponentLike\n): TypedChartComponent<TType, TData, TLabel> =>\n  defineComponent({\n    props: {\n      chartData: {\n        type: Object as PropType<TChartData<TType, TData, TLabel>>,\n        required: true\n      },\n      chartOptions: {\n        type: Object as PropType<TChartOptions<TType>>,\n        default: () => {}\n      },\n      datasetIdKey: {\n        type: String,\n        default: 'label'\n      },\n      chartId: {\n        type: String,\n        default: chartId\n      },\n      width: {\n        type: Number,\n        default: 400\n      },\n      height: {\n        type: Number,\n        default: 400\n      },\n      cssClasses: {\n        type: String,\n        default: ''\n      },\n      styles: {\n        type: Object as PropType<Partial<CSSStyleDeclaration>>,\n        default: () => {}\n      },\n      plugins: {\n        type: Array as PropType<Plugin<TType>[]>,\n        default: () => []\n      }\n    },\n    setup(props, context) {\n      ChartJS.register(chartController)\n\n      const _chart = shallowRef<TypedChartJS<TType, TData, TLabel> | null>(null)\n      const canvasEl = ref<HTMLCanvasElement | null>(null)\n\n      function renderChart(\n        data: TChartData<TType, TData, TLabel>,\n        options: TChartOptions<TType>\n      ): void {\n        if (_chart.value !== null) {\n          chartDestroy<TType, TData, TLabel>(toRaw(_chart.value), context)\n        }\n\n        if (canvasEl.value === null) {\n          throw new Error(templateError)\n        } else {\n          const chartData = getChartData<TType, TData, TLabel>(\n            data,\n            props.datasetIdKey\n          )\n          const canvasEl2DContext = canvasEl.value.getContext('2d')\n\n          if (canvasEl2DContext !== null) {\n            _chart.value = new ChartJS<TType, TData, TLabel>(\n              canvasEl2DContext,\n              {\n                type: chartType,\n                data: isProxy(data) ? new Proxy(chartData, {}) : chartData,\n                options,\n                plugins: props.plugins\n              }\n            )\n          }\n        }\n      }\n\n      function chartDataHandler(\n        newValue: TChartData<TType, TData, TLabel>,\n        oldValue: TChartData<TType, TData, TLabel>\n      ): void {\n        const newData = isProxy(newValue) ? toRaw(newValue) : { ...newValue }\n        const oldData = isProxy(oldValue) ? toRaw(oldValue) : { ...oldValue }\n\n        if (Object.keys(oldData).length > 0) {\n          const chart = toRaw(_chart.value)\n\n          const isEqualLabelsAndDatasetsLength = compareData<\n            TType,\n            TData,\n            TLabel\n          >(newData, oldData)\n\n          if (isEqualLabelsAndDatasetsLength && chart !== null) {\n            setChartDatasets<TType, TData, TLabel>(\n              chart?.data,\n              newData,\n              props.datasetIdKey\n            )\n\n            if (newData.labels !== undefined) {\n              setChartLabels<TType, TData, TLabel>(\n                chart,\n                newData.labels,\n                context\n              )\n            }\n\n            updateChart()\n          } else {\n            if (chart !== null) {\n              chartDestroy<TType, TData, TLabel>(chart, context)\n            }\n\n            chartCreate<TType, TData, TLabel>(\n              renderChart,\n              props.chartData,\n              props.chartOptions as ChartOptions<TType>,\n              context\n            )\n          }\n        } else {\n          if (_chart.value !== null) {\n            chartDestroy<TType, TData, TLabel>(toRaw(_chart.value), context)\n          }\n\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      }\n\n      function chartOptionsHandler(options: TChartOptions<TType>): void {\n        const chart = toRaw(_chart.value)\n\n        if (chart !== null) {\n          setChartOptions<TType, TData, TLabel>(chart, options)\n          updateChart()\n        } else {\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      }\n\n      function updateChart(): void {\n        const chart = toRaw(_chart.value)\n\n        if (chart !== null) {\n          chartUpdate<TType, TData, TLabel>(chart, context)\n        } else {\n          console.error(chartUpdateError)\n        }\n      }\n\n      watch(\n        () => props.chartData,\n        (\n          newValue: TChartData<TType, TData, TLabel>,\n          oldValue: TChartData<TType, TData, TLabel>\n        ) => chartDataHandler(newValue, oldValue),\n        { deep: true }\n      )\n\n      watch(\n        () => props.chartOptions,\n        newValue => chartOptionsHandler(newValue as ChartOptions<TType>),\n        { deep: true }\n      )\n\n      onMounted(() => {\n        if (\n          'datasets' in props.chartData &&\n          props.chartData.datasets.length > 0\n        ) {\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      })\n\n      onBeforeUnmount(() => {\n        if (_chart.value !== null) {\n          chartDestroy(toRaw(_chart.value), context)\n        }\n      })\n\n      context.expose({\n        chart: _chart,\n        updateChart\n      })\n\n      return () =>\n        h('div', { style: props.styles, class: props.cssClasses }, [\n          h('canvas', {\n            id: props.chartId,\n            width: props.width,\n            height: props.height,\n            ref: canvasEl\n          })\n        ])\n    }\n  }) as any\n\nexport const Bar = /* #__PURE__ */ generateChart(\n  'bar-chart',\n  'bar',\n  BarController\n)\n\nexport const Doughnut = /* #__PURE__ */ generateChart(\n  'doughnut-chart',\n  'doughnut',\n  DoughnutController\n)\n\nexport const Line = /* #__PURE__ */ generateChart(\n  'line-chart',\n  'line',\n  LineController\n)\n\nexport const Pie = /* #__PURE__ */ generateChart(\n  'pie-chart',\n  'pie',\n  PieController\n)\n\nexport const PolarArea = /* #__PURE__ */ generateChart(\n  'polar-chart',\n  'polarArea',\n  PolarAreaController\n)\n\nexport const Radar = /* #__PURE__ */ generateChart(\n  'radar-chart',\n  'radar',\n  RadarController\n)\n\nexport const Bubble = /* #__PURE__ */ generateChart(\n  'bubble-chart',\n  'bubble',\n  BubbleController\n)\n\nexport const Scatter = /* #__PURE__ */ generateChart(\n  'scatter-chart',\n  'scatter',\n  ScatterController\n)\n\nexport default {\n  Bar,\n  Doughnut,\n  Line,\n  Pie,\n  PolarArea,\n  Radar,\n  Bubble,\n  Scatter\n}\n"],
  "mappings": "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",
  "names": []
}
